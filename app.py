from fastapi import FastAPI, HTTPException, File, UploadFile, Form
from fastapi.middleware.cors import CORSMiddleware
import os
import uuid
import json
from elasticsearch import Elasticsearch, helpers
import pandas as pd

app = FastAPI()


# Password for the 'elastic' user generated by Elasticsearch
ELASTIC_PASSWORD = "NLQOcsuetKM6tWSkZ8pTTloZ"

# Found in the 'Manage Deployment' page
CLOUD_ID = "SIH:YXAtc291dGgtMS5hd3MuZWxhc3RpYy1jbG91ZC5jb206NDQzJDE0Mjc3ODcwNDgwYTQ5NmI5OTc2MDlhODIzN2UwYjY1JGUxOGQ1OTEzNDU3NjQ3OTBhYTY3NzcyNDc1YzgzNDJm"

# Create the client instance
client = Elasticsearch(
    cloud_id=CLOUD_ID,
    basic_auth=("elastic", ELASTIC_PASSWORD),
)

origins = [
    "http://localhost:3000",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/search")
def search(q: str):
    result = {}
    try:
        resp = client.search(body={"query": {"query_string": {"query": q}}})
        data = resp["hits"]["hits"]
        print(data)
        result['data'] = data
        result['meta'] = {'total':resp["hits"]["total"]["value"]}
        print(result["meta"])
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    return result


@app.post("/add")
async def add(file: UploadFile= File(...), name: str = Form()):
    
    try:
        contents = await file.read()

        try:
            f = open('sql.sql', 'wb')
            
            f.write(contents)
            f.close()
        except Exception as e:
            raise HTTPException(status_code=400, detail=str(e))

        cmd = f"sqldump-to -i {os.getcwd()}/sql.sql > j.json"
        # print(cmd)
        os.system(cmd)

        def generate_docs():
            try:
                f = open('j.json', encoding='utf8')
                data = json.load(f)
                print("len", len(data))
                # print(data)
                new_data = data
            except:
                f = open('j.json', encoding='utf8')
                data = f.readlines()
                new_data = []
                # print(data)
                for row in data:
                    dict_obj = json.loads(row)
                    new_data.append(dict_obj)  

            # print(new_data)

            if len(new_data) == 0:
                return []

            f = open('json.json', 'w')
            n_data = json.dumps(new_data)
            f.write(n_data)

            action_list = []

            for row in new_data:
                doc = {
                        "_index": name,
                        "_id": uuid.uuid4(),
                        "_source": row,
                    }
                action_list.append(doc)
            return action_list

        docs = generate_docs()
        if len(docs) == 0:
            return {'status': 0}
        helpers.bulk(client, docs)
        print("Done")
        os.remove('j.json')
        os.remove('sql.sql')
        
        return {"status": 1}
    except Exception as e:
        raise HTTPException(status_code=500,detail=str(e))

@app.get('/get/indices')
def indices():

    # print("working")
    data = client.indices.get_alias(index='*')
    # print(data)

    final_data = dict()
    for key in data:
        # print(key)
        if key[0] != '.':
            final_data[key] = data[key]

    # print(final_data)
    return {'indices': final_data}

@app.post('/create')
def create():
    pass