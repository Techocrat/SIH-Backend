from typing import Optional
from fastapi import FastAPI, HTTPException, File, UploadFile, Form
from fastapi.middleware.cors import CORSMiddleware
import os
import uuid
import json
from elasticsearch import Elasticsearch, helpers
# from PyPDF2 import PdfReader
# import validators
app = FastAPI()


# Password for the 'elastic' user generated by Elasticsearch
ELASTIC_PASSWORD = "NLQOcsuetKM6tWSkZ8pTTloZ"

# Found in the 'Manage Deployment' page
CLOUD_ID = "SIH:YXAtc291dGgtMS5hd3MuZWxhc3RpYy1jbG91ZC5jb206NDQzJDE0Mjc3ODcwNDgwYTQ5NmI5OTc2MDlhODIzN2UwYjY1JGUxOGQ1OTEzNDU3NjQ3OTBhYTY3NzcyNDc1YzgzNDJm"

# Create the client instance
client = Elasticsearch(
    cloud_id=CLOUD_ID,
    basic_auth=("elastic", ELASTIC_PASSWORD),
)

origins = [
    "http://localhost:3000",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)



@app.get("/")
async def get_routes():
    routes = {
        "Search API":"/search",
        "Add Data": "/add"
    }
    return routes

@app.get("/search")
async def search(q: str, page: Optional[int] = 1, per_page: Optional[int] = 10, index: Optional[str] = "", fields: Optional[str] = ""):
    result = {}

    index = json.loads(index)
    print(index)

    try:
        resp = client.search(index=index,
        body={
            "from":((page-1)*per_page),
            "size":per_page, "query": {"query_string": {"query": q}},
        })
        data = resp["hits"]["hits"]
        result['data'] = data
        result['meta'] = {'total':resp["hits"]["total"]["value"]}
        print(result["meta"])
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    return result

# @app.get('/allfields')
# async def fields():

#     try:
#         resp = client.indices.get_field_mapping(fields='*')

#         fdata = {}
#         for key in resp.keys():
#             if(key[0] == '.'):
#                 pass
#             else:
#                 fdata[key] = []
#                 for mkey in resp[key]['mappings'].keys():
#                     if '.keyword' in mkey or mkey[0] == '_':
#                         pass
#                     else:
#                         fdata[key].append(mkey)
                    
                
#         return {"data": fdata}
#     except Exception as e:
#         print('error', e)

@app.post("/add_data_to_index")
async def add_data_to_index(data: str):
    data = json.loads(data)
    fetch_index = data.get('index',None)
    if not fetch_index:
        raise HTTPException(status_code=400, detail="Index not found")
    fetch_doc_type = data.get('doc_type',None)
    if not fetch_doc_type:
        raise HTTPException(status_code=400, detail="Doc Type not found")
    if fetch_doc_type == 'text':
        fetch_data = data.get('data',None)
        if not fetch_data:
            raise HTTPException(status_code=400, detail="Data not found")
        try:
            fetch_data['doc_type'] = fetch_doc_type
            client.index(index=fetch_index,body=fetch_data)
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))
        return {"message":"Data added to index"}
    else:
        raise HTTPException(status_code=400, detail="Doc Type not supported for this endpoint")

# @app.post("/add_pdf_to_index")
# async def add_pdf_to_index(data:str):
    fetch_url = json.loads(data).get('url',None)
    if not fetch_url:
        raise HTTPException(status_code=400, detail="URL not found")
    if not validators.url(fetch_url):
        raise HTTPException(status_code=400, detail="Invalid URL")
    fetch_index = json.loads(data).get('index',None)
    if not fetch_index:
        raise HTTPException(status_code=400, detail="Index not found")
    fetch_doc_type = json.loads(data).get('doc_type',None)
    if not fetch_doc_type:
        raise HTTPException(status_code=400, detail="Doc Type not found")
    if fetch_doc_type == 'pdf':
        #pdf_Code
        pass
    else:
        raise HTTPException(status_code=400, detail="Doc Type not supported for this endpoint")

@app.post("/add_sql_dump")
async def add(file: UploadFile= File(...), name: str = Form()):
    try:
        contents = await file.read()

        try:
            f = open('sql.sql', 'wb')
            
            f.write(contents)
            f.close()
        except Exception as e:
            raise HTTPException(status_code=400, detail=str(e))

        cmd = f"sqldump-to -i {os.getcwd()}/sql.sql > j.json"
        # print(cmd)
        os.system(cmd)

        def generate_docs():
            try:
                f = open('j.json', encoding='utf8')
                data = json.load(f)
                print("len", len(data))
                # print(data)
                new_data = data
            except:
                f = open('j.json', encoding='utf8')
                data = f.readlines()
                new_data = []
                for row in data:
                    dict_obj = json.loads(row)
                    new_data.append(dict_obj)  

            # print(new_data)

            if len(new_data) == 0:
                return []

            f = open('json.json', 'w')
            n_data = json.dumps(new_data)
            f.write(n_data)

            action_list = []

            for row in new_data:
                doc = {
                        "_index": name,
                        "_id": uuid.uuid4(),
                        "_source": row,
                    }
                action_list.append(doc)
            return action_list

        docs = generate_docs()
        if len(docs) == 0:
            return {'status': 0}
        helpers.bulk(client, docs)
        print("Done")
        os.remove('j.json')
        os.remove('sql.sql')
        
        return {"status": 1}
    except Exception as e:
        raise HTTPException(status_code=500,detail=str(e))



@app.get('/indices')
def indices():

    print("working")
    try:
        data = client.indices.get_alias(index='*')
        print(data)

        final_data = dict()
        for key in data:
            print(key)
            if key[0] != '.':
                final_data[key] = data[key]

        print(final_data)
        return {'indices': final_data}
    except Exception as e:
        print(e)
        raise HTTPException(status_code=500, detail=str(e))



@app.post('/create')
def create():
    pass